{
  "active": false,
  "connections": {
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        []
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        []
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-15T16:01:59.620Z",
  "id": "nyCe3iV9jDxMfQPs",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "video generator",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "2117827e49d9cab7a60e2db6271ec0a7fe9a3a04798850dd0cb63f560db07847"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"luma\",\n  \"task_type\": \"video_generation\",\n  \"input\": {\n    \"prompt\": \"{{ $json.output.prompt }}\",\n    \"model_name\": \"ray-v1\",\n    \"duration\": 10,\n    \"aspect_ratio\": \"16:9\"\n  },\n  \"config\": {\n    \"webhook_config\": {\n      \"endpoint\": \"http://13.61.8.80/:5678/webhook/f1313e0f-5fe2-4c2f-8630-fb9b29851cc0\",\n      \"secret\": \"\"\n    },\n    \"service_mode\": \"\"\n  }\n} ",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        -460
      ],
      "id": "59ffa3c2-c118-4e61-9b00-aaad400228ea",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -220,
        -280
      ],
      "id": "777a3a9c-9683-4c58-ba26-bcc835101df4",
      "name": "When chat message received",
      "webhookId": "afae99dc-7eca-4df4-8fc0-8472d9ef1c0a"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are a helpful AI model that is well versed with instructional design and art of filmmaking. \nYour role is to generate detailed prompt for an idea or a text prompt provided by the user. A different text-to-video generation model will consume the prompt.\n\nThe context of the videos:\nThese videos are for K-12 kids located in 3rd world countries. \nEnsure the videos follow the principles of instructional design. \nUse film-making guidelines to make the content engaging. \nThe videos should also contain in-video questions. Add placeholders in the script to indicate where the questions should be added. ensure there is a proper transition from video to question and then back to video - both in visuals and script. This should have four options with the correct answer. \nThere should also be post-video questions which will check users' knowledge of the concept taught. This should have four options with the correct answer. \n\nOnly the final output should be sent out through the parser. "
            },
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=The user's prompt for video generation is as below:\n\n{{ $json.chatInput }}\n\nYou are to now generate a detailed prompt for the user to be input to another text-to-video model. \n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        0,
        -280
      ],
      "id": "0ada3ff7-c5a8-4eed-b904-1af384479847",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        20,
        -40
      ],
      "id": "85f09b3b-8d8c-44db-8ce4-57d7edc3b485",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "Qs73UZvTc5CCzGBb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"prompt\": \"This is the input prompt.\",\n  \"output_prompt\": \"This is the output prompt for the next model.\",\n  \"keywords\": [\"this\", \"is\", \"an\", \"array\", \"of\", \"keywords\", \"for\", \"the\", \"video\"],\n  \"summary\": \"Two-line summary for the video.\",\n  \"in_video_questions\": [\n    {\n      \"question\": \"This is the first in-video question.\",\n      \"options\": [\n        \"Option 1\",\n        \"Option 2\",\n        \"Option 3\",\n        \"Option 4\"\n      ],\n      \"correct_answer\": \"Option 2\"\n    },\n    {\n      \"question\": \"This is the second in-video question.\",\n      \"options\": [\n        \"Option 1\",\n        \"Option 2\",\n        \"Option 3\",\n        \"Option 4\"\n      ],\n      \"correct_answer\": \"Option 3\"\n    }\n  ],\n  \"after_video_questions\": [\n    {\n      \"question\": \"This is the first post-video question.\",\n      \"options\": [\n        \"Option 1\",\n        \"Option 2\",\n        \"Option 3\",\n        \"Option 4\"\n      ],\n      \"correct_answer\": \"Option 1\"\n    },\n    {\n      \"question\": \"This is the second post-video question.\",\n      \"options\": [\n        \"Option 1\",\n        \"Option 2\",\n        \"Option 3\",\n        \"Option 4\"\n      ],\n      \"correct_answer\": \"Option 4\"\n    }\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        180,
        -40
      ],
      "id": "c1e28130-d9dd-4753-8807-4852bc6df34a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "agent": "conversationalAgent",
        "promptType": "define",
        "text": "=\n- understand the context of the video to be genrated based on the prompt (here:{{ $json.output.prompt }}), summary (here: {{ $json.output.output_prompt }}). \n- identify places to embed the in-video questions generated by the agent in the previous step: {{ $json.output.in_video_questions }}\n- These questions will occur as prompts during the video, the student can then select any single option to answer.\n- The LMS has facility to create adaptive videos based on student selection. For example, if student selects incorrect option, video A plays. if student select correct option, video B plays. \n- Generate a script based on the prompt.\n- The script also mentions places where the in-video questions should come in the video. \n- Add a legend/reference to each question so that it can be directly referenced based on that in the workflows. Keep it uniform. \n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -760,
        -860
      ],
      "id": "8b858870-282b-428b-8e29-0e378700d86c",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -760,
        -500
      ],
      "id": "20925b7b-7155-4588-a17c-e58cebd54bd1",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "Qs73UZvTc5CCzGBb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\"script\": \"script as a text with appropriate markers for video creation\",\n  \"prompt\": \"prompt to be given to the video creator to parse the generated script correctly.\"\n  \n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        580,
        20
      ],
      "id": "8c601f35-4b14-45bd-91ce-5f33fef47c5d",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n- understand the context of the video to be genrated based on the prompt (here:{{ $json.output.prompt }}), summary (here: {{ $json.output.output_prompt }}). \n- identify places to embed the in-video questions generated by the agent in the previous step: {{ $json.output.in_video_questions }}\n- These questions will occur as prompts during the video, the student can then select any single option to answer.\n- The LMS has facility to create adaptive videos based on student selection. For example, if student selects incorrect option, video A plays. if student select correct option, video B plays. \n- For each question, add script for both correct answer first and then wrong answers, subsequently. \n- Add a pause after each question for tqo seconds, then mention the answers as:  \"if you selected <the correct answer, you are correct. <add explanation why>\". \"if you selected <the wrong option\", <add explanation on why it is incorect>\"\n- Generate a script based on the prompt.\n- The script also mentions places where the in-video questions should come in the video. \n- Add a legend/reference to each question so that it can be directly referenced based on that in the workflows. Keep it uniform. \n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        360,
        -280
      ],
      "id": "5cbad066-80e8-4c39-b935-ae56579b85dc",
      "name": "Basic LLM Chain1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        380,
        20
      ],
      "id": "6605da9f-9b0d-4368-bad0-618537584726",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "Qs73UZvTc5CCzGBb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Breakdown the incoming script into multiple parts. \nScript: {{ $json.text }}\n\nParts should follow this rule:\n- first part: start to first question\n- second part: first question to next question (second in this case)\n- subsequent parts: previous question to the next question (second question to third question in this case)\n- repeat till questions are present\n- last part: last question to end of script\n- break the script/prompt into subheaders and questions mentioned. \n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        920,
        -280
      ],
      "id": "3195d055-41db-41d0-9463-5f32bd54883e",
      "name": "Basic LLM Chain2"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        960,
        40
      ],
      "id": "015f92a5-3fb6-4d42-b897-bc8f8844f531",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "Qs73UZvTc5CCzGBb",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.text }}",
        "schemaType": "manual",
        "inputSchema": "{\n  \"part1\": [\n    {\n      \"text\": \"This is text\",\n      \"start_time\": \"Start time for this part\",\n      \"end_time\": \"End time for this part\"\n    }\n  ],\n  \"part2\": [\n    {\n      \"text\": \"This is text\",\n      \"start_time\": \"Start time for this part\",\n      \"end_time\": \"End time for this part\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        1280,
        -280
      ],
      "id": "1566e11a-4a87-49db-92a2-5ff91d837396",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1380,
        -60
      ],
      "id": "0772304f-43fd-4617-9f1a-9dd05b665648",
      "name": "OpenRouter Chat Model4",
      "credentials": {
        "openRouterApi": {
          "id": "Qs73UZvTc5CCzGBb",
          "name": "OpenRouter account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-15T19:47:05.000Z",
  "versionId": "a7cbfc17-7c11-47b0-90be-8d224cb3eb8f"
}